Option Public
Option Declare

%REM
	Dim session As NotesSession
	Dim database As NotesDatabase
	Dim dbUtils As DbUtils
	Dim timedate As TIMEDATE
	
	Set session = New NotesSession
	Set database = session.Getdatabase("domino-1.dmytro.cloud/DmytroDev", "test2.nsf", false)

	Set dbUtils = New DbUtils(session)
	
	Print "1) setDbReplicaIdRandom"
	Print "before: " & database.replicaID
	Call dbUtils.setDbReplicaIdRandom(database.server, database.filepath)
	Print "after " & database.replicaID
	
	Print "2) setDbReplicaIdByTimeDate"
	Print "before: " & database.replicaID
	timedate.Innards(0) = 1000
	timedate.Innards(1) = 64000
	Call dbUtils.setDbReplicaIdByTimeDate(database.server, database.filepath, timedate)
	Print "after " & database.replicaID
	
	Print "3) setDbReplicaIdByTimeDate"
	Print "before: " & database.replicaID
	Call dbUtils.setDbReplicaIdByString(database.server, database.filepath, "1234567887654321")
	Print "after " & database.replicaID
%END REM
Public Const W32_LIB = {nnotes.dll}
Public Const LINUX_LIB = {libnotes.so}

Type TIMEDATE
	Innards(0 To 1) As Long
End Type

Type DBREPLICAINFO
	ID As TIMEDATE				'ID that is same for all replica files
	Flags As Integer			'Replication flags
	CutoffInterval As Integer	'Automatic Replication Cutoff
	Cutoff As TIMEDATE			'Replication cutoff date
End Type

Declare Sub W32_OSCurrentTimeDate Lib W32_LIB Alias "OSCurrentTIMEDATE"(Ret As TIMEDATE)
Declare Function W32_NSFDbOpen Lib W32_LIB Alias "NSFDbOpen" (ByVal dbName As String, hdb As Long) As Integer
Declare Function W32_NSFDbClose Lib W32_LIB Alias "NSFDbClose" (ByVal hdb As Long) As Integer
Declare Function W32_NSFDbReplicaInfoGet Lib W32_LIB Alias "NSFDbReplicaInfoGet" (ByVal hdb As Long, hdbr As DBREPLICAINFO) As Integer
Declare Function W32_NSFDbReplicaInfoSet Lib W32_LIB Alias "NSFDbReplicaInfoSet" (ByVal hdb As Long, hdbr As DBREPLICAINFO) As Integer

Declare Sub LINUX_OSCurrentTimeDate Lib LINUX_LIB Alias "OSCurrentTIMEDATE"(Ret As TIMEDATE)
Declare Function LINUX_NSFDbOpen Lib LINUX_LIB Alias "NSFDbOpen" (ByVal dbName As String, hdb As Long) As Integer
Declare Function LINUX_NSFDbClose Lib LINUX_LIB Alias "NSFDbClose" (ByVal hdb As Long) As Integer
Declare Function LINUX_NSFDbReplicaInfoGet Lib LINUX_LIB Alias "NSFDbReplicaInfoGet" (ByVal hdb As Long, hdbr As DBREPLICAINFO) As Integer
Declare Function LINUX_NSFDbReplicaInfoSet Lib LINUX_LIB Alias "NSFDbReplicaInfoSet" (ByVal hdb As Long, hdbr As DBREPLICAINFO) As Integer

Class DbUtils
	Private m_session As NotesSession
	Private m_is_windows As Boolean
	
	Sub New(session As NotesSession)
		Set m_session = session
		m_is_windows = InStr(session.Platform, "Windows") > 0
	End Sub
	
	Public Property Get IS_WINDOWS As Boolean
		IS_WINDOWS = m_is_windows
	End Property
	
	Public Function setDbReplicaIdRandom(server As String, filePath As String) As String
		Dim replicaID As TIMEDATE
		
		If IS_WINDOWS Then
			Call W32_OSCurrentTimeDate(replicaID)
		Else
			Call LINUX_OSCurrentTimeDate(ReplicaID)
		End If
		
		Call setDbReplica(server, filePath, replicaID)
	End Function
	
	Public Function setDbReplicaIdByTimeDate(server As String, filePath As String, replicaID As TIMEDATE)
		Call setDbReplica(server, filePath, replicaID)
	End Function
	
	Public Function setDbReplicaIdByString(server As String, filePath As String, ReplicaIDString As String)
		Dim replicaID As TIMEDATE
		
		replicaID.Innards(0) = Val("&H" & Right(ReplicaIDString, 8))
		replicaID.Innards(1) = Val("&H" & Left(ReplicaIDString, 8))
		
		Call setDbReplica(server, filePath, replicaID)
	End Function
	
	Private Function setDbReplica(server As String, filePath As String, replicaID As TIMEDATE)
		Dim replicaInfo As DBREPLICAINFO
		Dim var As Variant
		Dim hDb As Long
		Dim rc As Integer
		
		'2. OPEN DATABASE: NSFDbOpen
		If server = "" Then
			If IS_WINDOWS Then
				rc = W32_NSFDbOpen(filePath, hDb)
			Else
				rc = LINUX_NSFDbOpen(filePath, hDb)
			End If
		Else
			If IS_WINDOWS Then
				rc = W32_NSFDbOpen(server & "!!" & filePath, hDb)
			Else
				rc = LINUX_NSFDbOpen(server & "!!" & filePath, hDb)
			End If
		End If

		If rc <> 0 Then
			Error 9001, "Couldn't open database: " & filePath
		End If

		'3. READ REPLICAID: NSFDbReplicaInfoGet
		If IS_WINDOWS Then
			rc = W32_NSFDbReplicaInfoGet(hDb, replicaInfo)
		Else
			rc = LINUX_NSFDbReplicaInfoGet(hDb, replicaInfo)
		End If

		If rc <> 0 Then
			Error 9001, "Couldn't get Replica Info"
		End If

		'4. GET CURRENT TIMEDATE (TO BUILD NEW REPLICAID): OSCurrentTimeDate
		ReplicaInfo.ID = ReplicaID
		
		'5. SET NEW REPLICAID: NSFDbReplicaInfoSet
		If IS_WINDOWS Then
			rc = W32_NSFDbReplicaInfoSet(hDb, replicaInfo)
		Else
			rc = LINUX_NSFDbReplicaInfoSet(hDb, replicaInfo)
		End If

		'6. READ REPLICAID: NSFDbReplicaInfoGet
		If IS_WINDOWS Then
			rc = W32_NSFDbReplicaInfoGet(hDb, replicaInfo)
		Else
			rc = LINUX_NSFDbReplicaInfoGet(hDb, replicaInfo)
		End If

		If rc <> 0 Then
			Error 9001, "Couldn't get Replica Info"
		End If

'		MessageBox("Replica ID of "+ filePath + " has been set to: " + Right("0000000" + Hex(replicaInfo.ID.Innards(1)), 8) + ":" + Right("0000000" + Hex(replicaInfo.ID.Innards(0)), 8))

		If IS_WINDOWS Then
			rc = W32_NSFDbClose(hDb)
		Else
			rc = LINUX_NSFDbClose(hDb)
		End If
	End Function
End Class
